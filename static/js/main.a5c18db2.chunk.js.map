{"version":3,"sources":["components/Form.js","components/Data.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","onSubmit","this","props","handleSubmit","type","name","placeholder","Component","Data","data","temp","humidity","windSpeed","windDir","des","App","state","country","city","e","a","preventDefault","target","elements","value","fetch","api","json","updateState","setState","sys","parseInt","main","wind","speed","deg","weather","description","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAEqBA,E,uKAEb,OACI,0BAAMC,UAAU,OAAOC,SAAUC,KAAKC,MAAMC,cACxC,2BAAOJ,UAAU,MAAMK,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9D,2BAAOP,UAAU,MAAMK,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3D,4BAAQP,UAAU,OAAlB,oB,GANkBQ,aCAbC,E,uKAEb,OACI,yBAAKT,UAAU,QAEPE,KAAKC,MAAMO,KAAKC,MAAQ,yBAAKX,UAAU,QAAf,gBAAqCE,KAAKC,MAAMO,KAAKC,KAArD,OAGxBT,KAAKC,MAAMO,KAAKE,UAAY,yBAAKZ,UAAU,QAAf,aAAkCE,KAAKC,MAAMO,KAAKE,SAAlD,KAG5BV,KAAKC,MAAMO,KAAKG,WAAa,yBAAKb,UAAU,QAAf,eAAoCE,KAAKC,MAAMO,KAAKG,UAApD,SAG7BX,KAAKC,MAAMO,KAAKI,SAAW,yBAAKd,UAAU,QAAf,mBAAwCE,KAAKC,MAAMO,KAAKI,QAAxD,WAG3BZ,KAAKC,MAAMO,KAAKK,KAAO,yBAAKf,UAAU,QAAf,gBAAqCE,KAAKC,MAAMO,KAAKK,IAArD,e,GAjBTP,aCGbQ,E,4MAEnBC,MAAQ,CACNC,QAAS,GACTC,KAAM,GACNR,KAAM,GACNC,SAAU,GACVC,UAAW,GACXC,QAAS,GACTC,IAAK,I,EAKPX,a,uCAAe,WAAOgB,GAAP,qBAAAC,EAAA,6DACbD,EAAEE,iBAEIJ,EAAUE,EAAEG,OAAOC,SAASN,QAAQO,MACpCN,EAAOC,EAAEG,OAAOC,SAASL,KAAKM,MAJvB,SAMKC,MAAM,oDAAD,OAAqDP,EAArD,YAA6DD,EAA7D,4CANV,cAMPS,EANO,gBAOMA,EAAIC,OAPV,OAOPlB,EAPO,OASb,EAAKmB,YAAYnB,GATJ,4C,wDAafmB,YAAc,SAACnB,GACb,EAAKoB,SAAS,CACZZ,QAASR,EAAKqB,IAAIb,QAClBC,KAAMT,EAAKJ,KACXK,KAAMqB,SAAStB,EAAKuB,KAAKtB,KAAO,KAChCC,SAAUF,EAAKuB,KAAKrB,SACpBC,UAAWH,EAAKwB,KAAKC,MACrBrB,QAASJ,EAAKwB,KAAKE,IACnBrB,IAAKL,EAAK2B,QAAQ,GAAGC,e,uDAKvB,OACE,yBAAKtC,UAAU,WACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,WACA,kBAAC,EAAD,CAAMI,aAAcF,KAAKE,eACzB,kBAAC,EAAD,CAAMM,KAAMR,KAAKe,c,GA7CMT,aCOb+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a5c18db2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Form extends Component {\r\n    render() {\r\n        return (\r\n            <form className=\"form\" onSubmit={this.props.handleSubmit}>\r\n                <input className=\"inp\" type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n                <input className=\"inp\" type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n                <button className=\"btn\" >Get Weather</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Data extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"list\" >\r\n                {\r\n                    this.props.data.temp && <div className=\"item\" >Tempretures: {this.props.data.temp} 'C</div>\r\n                }\r\n                {\r\n                    this.props.data.humidity && <div className=\"item\" >Humidity: {this.props.data.humidity} </div>\r\n                }\r\n                {\r\n                    this.props.data.windSpeed && <div className=\"item\" >Wind Speed: {this.props.data.windSpeed} knot</div>\r\n                }\r\n                {\r\n                    this.props.data.windDir && <div className=\"item\" >Wind Direction: {this.props.data.windDir} Degree</div>\r\n                }\r\n                {\r\n                    this.props.data.des && <div className=\"item\" >Description: {this.props.data.des} Today</div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/*\r\na very useful condition used here\r\n\r\nthis.props.data.temp && <div>Tempretures: {this.props.data.temp} 'C</div>\r\n\r\ncondition && return something\r\n\r\nif condition is true --> print the following statement\r\n*/","import React, { Component } from 'react'\nimport Form from './components/Form'\nimport Data from './components/Data'\nimport './index.css'\n\nexport default class App extends Component {\n\n  state = {\n    country: '',\n    city: '',\n    temp: '',\n    humidity: '',\n    windSpeed: '',\n    windDir: '',\n    des: ''\n  }\n\n\n\n  handleSubmit = async (e) => {           // async await --> used to make sure we did get the data from API\n    e.preventDefault();                   // prevent page reloading\n\n    const country = e.target.elements.country.value;      // form has elements, each element has a name attribute .. this contain the value\n    const city = e.target.elements.city.value;\n\n    const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=e36ed364400282e43250b6c4c0274d44`)\n    const data = await api.json();\n\n    this.updateState(data);\n\n  }\n\n  updateState = (data) => {\n    this.setState({\n      country: data.sys.country,\n      city: data.name,\n      temp: parseInt(data.main.temp - 273),\n      humidity: data.main.humidity,\n      windSpeed: data.wind.speed,\n      windDir: data.wind.deg,\n      des: data.weather[0].description\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\" >\n        <div className=\"container\" >\n          <h1 className=\"title\" >Weather</h1>\n          <Form handleSubmit={this.handleSubmit} />\n          <Data data={this.state} />\n        </div>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}